(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{217:function(n,t,a){"use strict";a.r(t);var s=a(28),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"rn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rn"}},[n._v("#")]),n._v(" rn")]),n._v(" "),a("ul",[a("li",[n._v("在navigationOptions中是不能使用this.state，因为修饰navigationOptions的是static变量，可以通过navigation.setParams可以动态设置navigation.state.params的值")]),n._v(" "),a("li",[n._v("react navigation的页面打开动画mode属性是全局配置的，如果想要特定页面设置modal方式，参考一下：")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 数组中的路由，可以自定义动画效果，这里只改了工期打卡页面\nconst IOS_MODAL_ROUTES = ['screen']\n\nconst dynamicModalTransition = (transitionProps, prevTransitionProps) => {\n  const isModal = IOS_MODAL_ROUTES.some(\n    (screenName) =>\n      screenName === transitionProps.scene.route.routeName ||\n      (prevTransitionProps && screenName === prevTransitionProps.scene.route.routeName)\n  )\n  return StackViewTransitionConfigs.defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  )\n}\n\nconst Stack = createStackNavigator(\n  {\n    Main: {\n      screen: XXX,\n    },\n    Login: {\n      screen: XXX,\n    },\n    ...\n  },\n  {\n    ...\n    transitionConfig: dynamicModalTransition,\n    ...\n  }\n)\n\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);